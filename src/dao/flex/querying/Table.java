package dao.flex.querying;

import dao.enums.TableType;
import dao.querying.CriteriaCondition;
import dao.querying.Ordering;
import java.util.ArrayList;
import java.util.List;
import java.util.StringTokenizer;

/**
 *
 * @author RAKOTOARISOA
 */public class Table {
    public static final int LIST_ROWS=20;
    
    private String nom;
    private List<ColumnField>colonnesfield;
    private TableType type; // view , table
    
    private List<ColumnField>uniqueKeys;// si clé combinnées au lieu d'une primary key

    public void setUniqueKeys(List<ColumnField> uniqueKeys) {
        this.uniqueKeys = uniqueKeys;
    }
    
    public List<ColumnField> getUniqueKeys(){
        return this.uniqueKeys;
    }
    
    public String getNom() {
        return nom;
    }

    public void setNom(String nom) {
        this.nom = nom;
    }
    
    public List<ColumnField> getColonnesfield() {
        return colonnesfield;
    }

    public void setColonnesfield(List<ColumnField> colonnesfield) {
        this.colonnesfield = colonnesfield;
    }

    public TableType getType() {
        return type;
    }

    public void setType(TableType type) {
        this.type = type;
    }
    
    public Table(String nom, List<ColumnField>colonnes, TableType type){
        this.setNom(nom);
        this.setColonnesfield(colonnes);
        this.setType(type);
        this.uniqueKeys=this.findUniqueKeys();
    }
    
    public List<ColumnField> findUniqueKeys(){
        List<ColumnField>colonnes=new ArrayList();
        for(ColumnField colonne: this.getColonnesfield()){
            if(colonne.isUnique()){
                colonnes.add(colonne);
            }
        }
        return colonnes;
    }
    
    public List<ColumnField>getNonAutogeneratedColumns(){
        List<ColumnField>colonnes=new ArrayList();
        for(ColumnField colonne: this.getColonnesfield()){
            if(!colonne.isAutogenerating()){
                colonnes.add(colonne);
            }
        }
        return colonnes;
    }
    
    public String generateInsertQuery(List<ColumnField>colonnesToInsert){
        String sql="insert into "+this.getNom()+" %c values %v";
        String colonnes=colonnesToInsert.toString()
                        .replace('[', '(')
                        .replace(']', ')');
        StringTokenizer st = new StringTokenizer(colonnes, ",");
        String values=colonnes;
        while (st.hasMoreTokens()){
            values=values.replace(st.nextToken(), "?");
        }
        values="("+values+")";
        sql=sql.replace("%c", colonnes)
               .replace("%v", values);            
        return sql;
    }
    
    //retourne une String au format clé=?valeur de chaque élément de la liste
    public static String settingFormat(List liste){
        String toformat= liste.toString()
                .replace(",", "=?,")
                .replace("]", "=?")
                .replace('[', ' ');
        return toformat;
    }
    
    public String generateUpdateQuery(){
        String sql="update "+this.getNom()+" set %s where %k";
        String settings=settingFormat(this.getColonnesfield());
        String keys=settingFormat(this.getUniqueKeys()).replaceAll(",", " and");
        return sql.replace(" %s", settings).replace(" %k", keys);
    }
    
    public String generateDeleteQuery() throws Exception{
        String sql="delete from "+this.getNom()+" where %k";
        String keys=settingFormat(this.getUniqueKeys()).replaceAll(",", " and");
        return sql.replace(" %k", keys);
    }
    
    public String generateSelectionQuery()throws Exception{
        return "select * from "+this.getNom();
    }
    
    public String whereAnd(List<CriteriaCondition>criteres){
        String condition=criteres.toString().replace(","," and");
        return condition.substring(1, condition.length()-1);
    }
    
    public String countAllRowsQuery(){
        return "select count(*) COMPTE from "+this.getNom();
    }
    
    public String paginate(Integer nbLignes, int page){
        if(nbLignes==null){
            nbLignes=LIST_ROWS;
        }
        return " limit "+nbLignes+" offset "+(page-1)*nbLignes;
    }
    
    public String orderBy(Ordering ordering){
        return " order by "+ordering.toString(); 
    }
    
    public String orderBy(List<Ordering>orderings){
        String orders=orderings.toString()
                .replace('[',' ')
                .replace(']', ' ');
        return " order by"+orders;
    }
}